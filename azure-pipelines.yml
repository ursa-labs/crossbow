# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

jobs:
- job: linux
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: 360
  steps:
    - task: CondaEnvironment@1
      inputs:
        packageSpecs: 'click github3.py jinja2 jira pygit2 ruamel.yaml setuptools_scm toolz'
        installOptions: '-c conda-forge'
        updateConda: false

    - script: |
        set -ex
        git clone --no-checkout https://github.com/apache/arrow arrow
        git -C arrow fetch -t https://github.com/apache/arrow master
        git -C arrow checkout FETCH_HEAD
        git -C arrow submodule update --init --recursive
      displayName: Clone arrow

    - script: pip install -e arrow/dev/archery[docker]
      displayName: Setup Archery

    - script: |
        set -ex
        cd arrow
        BUILD_IMAGE=centos-python-manylinux2010
        archery docker run \
          -e SETUPTOOLS_SCM_PRETEND_VERSION="2.1.0.dev421" \
          -e PYTHON_VERSION="3.8" \
          -e UNICODE_WIDTH="16" \
          ${BUILD_IMAGE}
        
        archery docker push ${BUILD_IMAGE} || :
        
      env:
        ARCHERY_DOCKER_USER: $(ARCHERY_DOCKER_USER)
        ARCHERY_DOCKER_PASSWORD: $(ARCHERY_DOCKER_PASSWORD)
        DOCKER_BUILDKIT: 0
        COMPOSE_DOCKER_CLI_BUILD: 1
      displayName: Build wheel

    # auditwheel does always exit with 0 so it is mostly for debugging
    # purposes
    - script: |
        set -ex
        cd arrow
        docker run \
          -v $(pwd):/arrow quay.io/pypa/manylinux2010_x86_64 \
          /bin/bash -c \
            "auditwheel show /arrow/python/manylinux201x/dist/*.whl"
      displayName: Audit wheel

    - script: |
        set -ex
        cd arrow
        test_args=""
        test_args="${test_args} --remove-system-libs"
        docker run \
          --shm-size 2G \
          -v $(pwd):/arrow \
          -e WHEEL_DIR="manylinux201x" \
          python:3.8 \
          /arrow/dev/tasks/python-wheels/manylinux-test.sh ${test_args}
      displayName: Test wheel

    - script: |
        set -ex
        python arrow/dev/tasks/crossbow.py \
          --queue-path . \
          --queue-remote https://github.com/ursa-labs/crossbow \
          upload-artifacts \
          --pattern "arrow/python/manylinux201x/dist/*" \
          --sha nightly-2020-12-20-0-azure-wheel-manylinux2010-cp38 \
          --tag nightly-2020-12-20-0-azure-wheel-manylinux2010-cp38
      env:
        CROSSBOW_GITHUB_TOKEN: $(CROSSBOW_GITHUB_TOKEN)
      displayName: Upload packages as a GitHub release

    
    # upload to gemfury
    - script: |
        path=$(ls arrow/python/manylinux201x/dist/*.whl)
        curl -F "package=@${path}" https://${CROSSBOW_GEMFURY_TOKEN}@push.fury.io/${CROSSBOW_GEMFURY_ORG}/
      env:
        CROSSBOW_GEMFURY_TOKEN: $(CROSSBOW_GEMFURY_TOKEN)
        CROSSBOW_GEMFURY_ORG: $(CROSSBOW_GEMFURY_ORG)
      displayName: Upload packages to Gemfury
    